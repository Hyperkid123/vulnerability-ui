import {
    Popover,
    Text,
    TextContent,
    TextList,
    TextListItem,
    TextListItemVariants,
    TextListVariants,
    TextVariants
} from '@patternfly/react-core';
import { QuestionCircleIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React from 'react';

const V3names = {
    AV: { name: 'Attack Vector', values: { N: 'Network', A: 'Adjacent', L: 'Local', P: 'Physical' } },
    AC: { name: 'Attack Complexity', values: { L: 'Low', H: 'High' } },
    PR: { name: 'Privileges Required', values: { N: 'None', L: 'Low', H: 'High' } },
    UI: { name: 'User Interaction', values: { N: 'None', R: 'Required' } },
    S: { name: 'Scope', values: { U: 'Unchanged', C: 'Changed' } },
    C: { name: 'Confidentiality', values: { H: 'High', L: 'Low', N: 'None' } },
    I: { name: 'Integrity', values: { H: 'High', L: 'Low', N: 'None' } },
    A: { name: 'Availability', values: { H: 'High', L: 'Low', N: 'None' } },
    CVSS: { name: 'cvssVersion', values: { '3.0': 3.0 } }
};

const V2names = {
    AV: { name: 'Access Vector', values: { N: 'Network', A: 'Adjacent Network', L: 'Local' } },
    AC: { name: 'Access Complexity', values: { L: 'Low', H: 'High', M: 'Medium' } },
    Au: { name: 'Authentication', values: { M: 'Multiple', S: 'Single', N: 'None' } },
    C: { name: 'Confidentiality Impact', values: { C: 'Complete', P: 'Partial', N: 'None' } },
    I: { name: 'Integrity Impact', values: { C: 'Complete', P: 'Partial', N: 'None' } },
    A: { name: 'Availability Impact', values: { C: 'Complete', P: 'Partial', N: 'None' } }
};

class CvssVector extends React.Component {
    constructor(props) {
        super(props);
    }

    parseVector = (vector, namesMapping) => {
        let res = {};
        vector &&
            vector.split('/').forEach(curr => {
                let [key, val] = curr.split(':');
                const name = namesMapping[key] && namesMapping[key].name;
                const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';
                if (name) {
                    res[name] = value;
                }
            });
        return res;
    };

    render() {
        const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector } = this.props;
        const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';
        const cvssVector = CVSS3Vector || CVSS2Vector;
        const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);
        const parsedVector = this.parseVector(cvssVector, namesMapping);
        if (cvssVector) {
            // eslint-disable-next-line no-unused-vars
            const { cvssVersion, ...values } = parsedVector;
            return (
                <TextContent>
                    <Text component={TextVariants.h6}>
                        {cvssVer} vector{' '}
                        <Popover
                            position="right"
                            enableFlip={true}
                            headerContent={<div>{cvssVer} vector breakdown</div>}
                            bodyContent={
                                <TextContent>
                                    <TextList component={TextListVariants.dl}>
                                        {Object.entries(values).map(item => (
                                            <React.Fragment key={item[0]}>
                                                <TextListItem component={TextListItemVariants.dt}>{item[0]}:</TextListItem>
                                                <TextListItem component={TextListItemVariants.dd}>{item[1]}</TextListItem>
                                                <br />
                                            </React.Fragment>
                                        ))}
                                    </TextList>
                                </TextContent>
                            }
                        >
                            <QuestionCircleIcon color={'var(--pf-global--link--Color)'} />
                        </Popover>
                    </Text>
                    <Text component={TextVariants.p}>{cvssVector}</Text>
                </TextContent>
            );
        }

        return <React.Fragment />;
    }
}

CvssVector.defaultProps = {
    title: '',
    publish_date: ''
};

CvssVector.propTypes = {
    title: propTypes.string,
    publish_date: propTypes.string,
    cvss2_metrics: propTypes.string,
    cvss3_metrics: propTypes.string
};

export default CvssVector;
