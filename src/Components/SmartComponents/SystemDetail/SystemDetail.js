import { NoVulnerabilityData } from '@redhat-cloud-services/frontend-components-inventory-vulnerabilities';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { setHeader } from '../../../Store/Actions/Actions';
import { paths } from '../../../Utilities/Routes';
import CVEs from '../CVEs/CVEs';

class SystemDetail extends React.Component {
    static propTypes = {
        setHeader: propTypes.func,
        entity: propTypes.object
    };

    constructor(props) {
        super(props);
    }

    render() {
        const { entity } = this.props;
        const Component = () => NoVulnerabilityData;
        this.props.setHeader({
            breadcrumbs: [
                { title: 'Vulnerability', to: paths.vulnerabilities },
                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }
            ]
        });

        if (entity) {
            return (
                <React.Fragment>
                    <CVEs entity={entity.id} />
                </React.Fragment>
            );
        } else {
            return (
                <React.Fragment>
                    <Component />
                </React.Fragment>
            );
        }
    }
}

const mapDispatchToProps = () => {
    return {
        setHeader: header => dispatchAction(setHeader(header))
    };
};

function mapStateToProps({ entityDetails: { entity } }) {
    return {
        entity
    };
}

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(SystemDetail)
);
