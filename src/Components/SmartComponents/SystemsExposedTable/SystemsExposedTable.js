import * as reactCore from '@patternfly/react-core';
import { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { RemediationButton, SimpleTableFilter, StatusDropdown } from '@red-hat-insights/insights-frontend-components';
import { addNotification } from '@red-hat-insights/insights-frontend-components/components/Notifications';
import debounce from 'lodash/debounce';
import { PaginationRow } from 'patternfly-react';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { dataShape } from '../../../Helpers/MiscHelper';
import { fetchAffectedSystemsByCVE } from '../../../Store/Actions/Actions';
import { FETCH_AFFECTED_SYSTEMS_BY_CVE } from '../../../Store/ActionTypes';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';
import ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';
import './SystemsExposedTable.scss';
/*eslint camelcase: 0*/

class SystemsExposedTable extends React.Component {
    constructor(props) {
        super(props);
        this.checkItem = this.checkItem.bind(this);
        this.dataProvider = this.dataProvider.bind(this);
        this.onCreated = this.onCreated.bind(this);
        this.getSelectedSystems = this.getSelectedSystems.bind(this);
        this.onRefresh = this.onRefresh.bind(this);
        this.dataReload = this.dataReload.bind(this);

        this.state = {
            InventoryCmp: () => <div>Loading...</div>,
            removeListener: () => {},
            filter: '',
            columns: [
                { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'fqdn'] },
                {
                    key: 'status',
                    title: 'Status',
                    props: {
                        width: 20
                    }
                },
                {
                    key: 'updated',
                    title: 'Last Seen',
                    isTime: true,
                    props: {
                        width: 10
                    }
                }
            ]
        };
    }

    componentDidMount() {
        this.props.fetchData(this.props.cve);
        StatusDropdown.setCallback(this.dataReload);
        this.setState({
            removeListener: middlewareListener.addNew({
                on: FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED',
                callback: () => this.fetchInventory()
            })
        });
    }

    onCreated(result) {
        dispatchAction(addNotification(result.getNotification()));
    }

    getSelectedSystems() {
        let systems =
            (this.props.entities &&
                this.props.entities.loaded &&
                this.props.entities.rows.filter(system => system.selected).map(system => system.id)) ||
            0;
        return systems;
    }

    dataProvider() {
        return {
            issues: [
                {
                    id: `vulnerabilities:${this.props.cve}`,
                    description: this.props.cve
                }
            ],
            systems: this.getSelectedSystems()
        };
    }

    dataReload() {
        const { meta } = this.props.affectedSystems;
        this.props.fetchData(this.props.cve, { page: meta.page, page_size: meta.page_size, filter: this.state.filter });
    }

    onRefresh({ page, per_page: perPage }) {
        const { meta } = this.props.affectedSystems;
        if (meta.page !== page || meta.page_size !== perPage) {
            this.props.fetchData(this.props.cve, {
                page: meta.page_size !== perPage ? 1 : page,
                page_size: perPage,
                filter: this.state.filter
            });
        }
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReact: { PaginationRow }
        });
        ReducerRegistry.register({
            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),
            ...mergeWithDetail()
        });

        this.setState({
            InventoryCmp: inventoryConnector().InventoryTable
        });
    }

    filterChange = debounce(value => {
        const { meta } = this.props.affectedSystems;
        const { page_size } = meta;
        this.setState({ ...this.state, filter: value }, () =>
            this.props.fetchData(this.props.cve, { page_size, filter: this.state.filter })
        );
    }, 400);

    checkItem(key, value) {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    }

    render() {
        const { InventoryCmp } = this.state;
        const { data, meta } = this.props.affectedSystems;
        return (
            <InventoryCmp
                hasCheckbox={data.length !== 0}
                page={meta.page}
                total={meta.total_items}
                perPage={meta.page_size}
                onRefresh={this.onRefresh}
                items={data.map(item => ({
                    id: item.attributes.inventory_id,
                    ...item.attributes
                }))}
            >
                <ToolbarGroup className={'space-between-toolbar-items'}>
                    <ToolbarItem>
                        <SimpleTableFilter
                            onFilterChange={this.filterChange}
                            buttonTitle={null}
                            placeholder="Find a system by UUID"
                        />
                    </ToolbarItem>
                    <ToolbarItem>
                        <RemediationButton
                            dataProvider={this.dataProvider}
                            isDisabled={!this.getSelectedSystems().length}
                            onRemediationCreated={this.onCreated}
                        />
                    </ToolbarItem>
                </ToolbarGroup>
            </InventoryCmp>
        );
    }
}

SystemsExposedTable.propTypes = {
    cve: propTypes.string,
    fetchData: propTypes.func,
    affectedSystems: dataShape,
    entities: propTypes.object
};

function mapStateToProps(state, ownProps) {
    return {
        affectedSystems: sExposedSystemsTable(state, ownProps.cve),
        entities: state.entities
    };
}

const mapDispatchToProps = () => {
    return {
        fetchData: (cve, options) => dispatchAction(fetchAffectedSystemsByCVE(cve, options))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(SystemsExposedTable)
);
