import { Button, Modal } from '@patternfly/react-core';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import { connect } from 'react-redux';

export const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {
    const [targetItems, setTargetItems] = useState(items);

    const createNotification = notification => {
        return props.addNotification(notification);
    };

    const handleClose = () => {
        setTargetItems(undefined);
    };

    const handleSave = () => {
        onSave().then(() => createNotification(onSuccessNotification));
        handleClose();
    };

    return (
        <React.Fragment>
            <Modal
                isSmall
                title={title}
                isOpen={Boolean(targetItems)}
                onClose={handleClose}
                actions={[
                    <Button key="save" variant="primary" onClick={handleSave}>
                        Save
                    </Button>,
                    <Button key="cancel" variant="secondary" onClick={handleClose}>
                        Cancel
                    </Button>
                ]}
            >
                {props.children}
            </Modal>
        </React.Fragment>
    );
};

BaseModal.propTypes = {
    children: propTypes.any,
    onClose: propTypes.func,
    items: propTypes.array,
    updateRef: propTypes.func,
    addNotification: propTypes.func,
    title: propTypes.string,
    onSave: propTypes.func,
    onSuccessNotification: propTypes.object
};

const mapDispatchToProps = dispatch => {
    return {
        addNotification: data => dispatch(addNotification(data))
    };
};

export default connect(
    null,
    mapDispatchToProps
)(BaseModal);
