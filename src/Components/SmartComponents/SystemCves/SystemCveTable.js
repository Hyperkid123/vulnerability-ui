import { SortByDirection, Table, TableBody, TableHeader } from '@patternfly/react-table';
import { TableToolbar } from '@redhat-cloud-services/frontend-components';
import { RowLoader } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import propTypes from 'prop-types';
import React, { Component, Fragment } from 'react';
import { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';
import { createSortBy } from '../../../Helpers/MiscHelper';
import PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';
import { CVETableContext } from './SystemCves';

class SystemCvesTableWithContext extends Component {
    static propTypes = {
        context: propTypes.any,
        header: propTypes.array,
        isSelectable: propTypes.bool,
        entity: propTypes.object
    };

    noCves = () => {
        const { entity, context } = this.props;
        const { cves } = context;
        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(
            item => cves.meta.hasOwnProperty(item) && cves.meta[item]
        );
        if (filterFields.length !== 0) {
            return FilterNotFoundForCVE;
        } else if (entity) {
            return EmptyCVEListForSystem;
        } else if (cves.data.length === 0) {
            return EmptyCVEList;
        }
    };

    handleSortColumn = (event, key, direction) => {
        let columnMapping = this.props.isSelectable ? [{ key: 'checkbox' }, ...this.props.header] : this.props.header;
        let columnName = columnMapping[key].key;
        const { cves, methods } = this.props.context;
        const currentSort = cves.meta.sort;
        const useDefault = currentSort && currentSort.substr(1) !== columnName;
        if (direction === SortByDirection.desc || useDefault) {
            columnName = '-' + columnName;
        }

        methods.apply({ sort: columnName });
    };

    handleOnSelect = (event, isSelected, rowId) => {
        const { context } = this.props;
        const { cves, methods } = context;
        const cveName = cves.data[rowId] && cves.data[rowId].id;
        methods.selectCves(isSelected, cveName);
    };

    render() {
        const { context, header } = this.props;
        const { params, cves, methods } = context;
        const { selectedCves } = params;
        const rows = cves.data.map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve);
        const loader = [...Array(3)].map(() => ({
            cells: [
                {
                    title: <RowLoader />,
                    props: {
                        colSpan: header.length
                    }
                }
            ]
        }));
        return (
            <Fragment>
                <Table
                    aria-label={'Vulnerability CVE table'}
                    onSelect={(this.props.isSelectable && this.handleOnSelect) || undefined}
                    cells={header}
                    rows={cves.isLoading ? loader : rows}
                    sortBy={createSortBy([{ key: 'checkbox' }, ...header], cves.meta.sort)}
                    onSort={this.handleSortColumn}
                    gridBreakPoint={'grid-lg'}
                >
                    {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (
                        <Fragment>
                            <TableHeader />
                            <TableBody />
                        </Fragment>
                    )}
                </Table>
                <TableToolbar>
                    <PaginationWrapper variant="bottom" meta={cves.meta} apply={methods.apply} />
                </TableToolbar>
            </Fragment>
        );
    }
}

const SystemCvesTable = props => (
    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>
);
export default SystemCvesTable;
