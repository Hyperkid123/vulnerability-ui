import { Pagination, PaginationVariant } from '@patternfly/react-core';
import { Table, TableBody, TableHeader } from '@patternfly/react-table';
import { TableToolbar } from '@redhat-cloud-services/frontend-components';
import { RowLoader } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import propTypes from 'prop-types';
import React, { Component, Fragment } from 'react';
import { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';
import { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';
import { CVETableContext } from './VulnerabilitiesCves';

class VulnerabilitiesTableWithContext extends Component {
    static propTypes = {
        context: propTypes.any,
        header: propTypes.array,
        isSelectable: propTypes.bool,
        entity: propTypes.object
    };

    createPagination = () => {
        const {
            cves: { meta }
        } = this.props.context;
        return (
            <Pagination
                page={meta.page || 1}
                itemCount={meta.total_items || 0}
                perPage={meta.page_size || 50}
                onSetPage={this.handleChangePage}
                onPerPageSelect={this.handleSetPageSize}
                variant={PaginationVariant.bottom}
            />
        );
    };

    noCves = () => {
        const { entity, context } = this.props;
        const { cves } = context;
        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(
            item => cves.meta.hasOwnProperty(item) && cves.meta[item]
        );
        if (filterFields.length !== 0) {
            return FilterNotFoundForCVE;
        } else if (entity) {
            return EmptyCVEListForSystem;
        } else if (cves.data.length === 0) {
            return EmptyCVEList;
        }
    };

    handleChangePage = (_event, pageNumber) => {
        const { methods } = this.props.context;
        methods.apply({ page: pageNumber });
    };

    handleSetPageSize = (_event, perPage) => {
        const { methods } = this.props.context;
        // eslint-disable-next-line camelcase
        methods.apply({ page_size: perPage, page: 1 });
    };

    handleOnSelect = (event, isSelected, rowId) => {
        const { context } = this.props;
        const { cves, methods } = context;
        const cveName = cves.data[rowId] && cves.data[rowId].id;
        methods.selectCves(isSelected, cveName);
    };

    render() {
        const { context, header } = this.props;
        const { params, cves, methods } = context;
        const { selectedCves } = params;
        const rows = cves.data.map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve);
        const loader = [...Array(3)].map(() => ({
            cells: [
                {
                    title: <RowLoader />,
                    props: {
                        colSpan: header.length
                    }
                }
            ]
        }));
        return (
            <Fragment>
                <Table
                    aria-label={'Vulnerability CVE table'}
                    onSelect={(this.props.isSelectable && this.handleOnSelect) || undefined}
                    cells={header}
                    rows={cves.isLoading ? loader : rows}
                    sortBy={createSortBy(header, cves.meta.sort)}
                    onSort={(event, key, direction) => handleSortColumn(key, direction, header, cves.meta.sort, methods.apply)}
                    gridBreakPoint={'grid-lg'}
                >
                    {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (
                        <Fragment>
                            <TableHeader />
                            <TableBody />
                        </Fragment>
                    )}
                </Table>
                <TableToolbar>{this.createPagination()}</TableToolbar>
            </Fragment>
        );
    }
}

const VulnerabilitiesTable = props => (
    <CVETableContext.Consumer>
        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}
    </CVETableContext.Consumer>
);
export default VulnerabilitiesTable;
