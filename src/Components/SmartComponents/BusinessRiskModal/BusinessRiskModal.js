import { Button, Form, FormGroup, Modal, Radio, Stack, StackItem, TextInput } from '@patternfly/react-core';
import React, { useState, useEffect } from 'react';
import { businessRiskOptions } from '../../../Helpers/constants';
import propTypes from 'prop-types';

const notifications = {
    success: {
        variant: 'success',
        title: 'Status change done!'
    }
};

const BusinessRiskModal = ({ open, onClose, cves }) => {
    const cveList = [].concat(cves);
    const [businessRiskId, setBusinessRiskId] = useState('0');
    const [label, setLabel] = useState();

    useEffect(getDefaultBusinessRisk, [cves]);

    const createNotification = type => {
        return this.props.hasNotification && this.props.addNotification(notifications[type]);
    };

    const handleOnRadioChange = (_, event) => {
        const { value } = event.currentTarget;
        setBusinessRiskId(value);
    };

    const handleOnLabelChange = value => {
        setLabel(value);
    };

    function getDefaultBusinessRisk() {
        const isSame = cveList.every(item => item.business_risk_id === cveList[0].business_risk_id);
        setBusinessRiskId(
            (isSame && businessRiskOptions.find(item => item.value === cveList[0].business_risk_id.toString()).value) || '0'
        );
    }

    const modal = open && (
        <Modal
            isSmall
            title="Edit business risk"
            isOpen={open}
            onClose={onClose}
            actions={[
                <Button key="save" variant="primary" onClick={() => {}}>
                    Save
                </Button>,
                <Button key="cancel" variant="secondary" onClick={onClose}>
                    Cancel
                </Button>
            ]}
        >
            <Stack>
                <StackItem>Business risk can be used to mark which CVEs are most important to you business.</StackItem>
                <StackItem>
                    <Form>
                        <FormGroup label="Business risk" fieldId={'businessRiskId'}>
                            {businessRiskOptions.map(item => (
                                <Radio
                                    value={item.value}
                                    isChecked={businessRiskId === item.value}
                                    onChange={handleOnRadioChange}
                                    label={item.label}
                                    key={item.value}
                                    id={item.value}
                                    name={item.label}
                                    aria-label={item.label}
                                />
                            ))}
                        </FormGroup>
                        <FormGroup label="Label" fieldId={'label'} helperText="100 character limit">
                            <TextInput type="text" onChange={handleOnLabelChange} value={label} aria-label={'justification'} />
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </Modal>
    );

    return <React.Fragment>{modal}</React.Fragment>;
};

BusinessRiskModal.propTypes = {
    open: propTypes.bool,
    onToggle: propTypes.func
};
export default BusinessRiskModal;
