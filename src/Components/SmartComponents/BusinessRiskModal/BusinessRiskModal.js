import { Button, Form, FormGroup, Modal, Radio, Stack, StackItem, TextInput } from '@patternfly/react-core';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import propTypes from 'prop-types';
import React, { useEffect, useState } from 'react';
import { connect } from 'react-redux';
import { setBusinessRisk } from '../../../Helpers/APIHelper';
import { businessRiskOptions } from '../../../Helpers/constants';

const BusinessRiskModal = ({ cves, updateRef, ...props }) => {
    const [cveList, setCveList] = useState(cves);
    const [businessRiskId, setBusinessRiskId] = useState('0');
    const [label, setLabel] = useState();

    useEffect(getDefaultBusinessRisk, [cves]);

    const createNotification = () => {
        return props.addNotification({
            variant: 'success',
            title: `Business risk updated for ${cveList.length} CVEs`
        });
    };

    const handleOnRadioChange = (_, event) => {
        const { value } = event.currentTarget;
        setBusinessRiskId(value);
    };

    const handleOnLabelChange = value => {
        setLabel(value);
    };

    const handleClose = () => {
        setCveList(undefined);
    };

    const handleSave = () => {
        setBusinessRisk({
            business_risk_id: parseInt(businessRiskId),
            cve: cveList.map(item => item.id),
            business_risk_text: label
        })
        .then(() => createNotification())
        .then(updateRef);
        handleClose();
    };

    function getDefaultBusinessRisk() {
        const isSame = cveList.every(item => item.business_risk_id === cveList[0].business_risk_id);
        setBusinessRiskId(
            (isSame && businessRiskOptions.find(item => item.value === cveList[0].business_risk_id.toString()).value) || '0'
        );
    }

    const modal = open && (
        <Modal
            isSmall
            title="Edit business risk"
            isOpen={Boolean(cveList)}
            onClose={handleClose}
            actions={[
                <Button key="save" variant="primary" onClick={handleSave}>
                    Save
                </Button>,
                <Button key="cancel" variant="secondary" onClick={handleClose}>
                    Cancel
                </Button>
            ]}
        >
            <Stack>
                <StackItem>Business risk can be used to mark which CVEs are most important to you business.</StackItem>
                <StackItem>
                    <Form>
                        <FormGroup label="Business risk" fieldId={'businessRiskId'}>
                            {businessRiskOptions.map(item => (
                                <Radio
                                    value={item.value}
                                    isChecked={businessRiskId === item.value}
                                    onChange={handleOnRadioChange}
                                    label={item.label}
                                    key={item.value}
                                    id={item.value}
                                    name={item.label}
                                    aria-label={item.label}
                                />
                            ))}
                        </FormGroup>
                        <FormGroup label="Label" fieldId={'label'} helperText="100 character limit">
                            <TextInput type="text" onChange={handleOnLabelChange} value={label} aria-label={'justification'} />
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </Modal>
    );

    return <React.Fragment>{modal}</React.Fragment>;
};

BusinessRiskModal.propTypes = {
    open: propTypes.bool,
    onClose: propTypes.func
};

const mapDispatchToProps = dispatch => {
    return {
        addNotification: data => dispatch(addNotification(data))
    };
};

export default connect(
    null,
    mapDispatchToProps
)(BusinessRiskModal);
