import React, { useEffect, Fragment, useState, useMemo } from 'react';
import * as reactRouterDom from 'react-router-dom';
import * as reactCore from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { useDispatch, useSelector } from 'react-redux';
import * as pfReactTable from '@patternfly/react-table';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import { Main } from '@redhat-cloud-services/frontend-components';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';
import { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';
import { fetchSystems, changeSystemsParams, selectMultipleEntities } from '../../../Store/Actions/Actions';
import SystemsTableToolbar from './SystemsTableToolbar';

const systemsListColumns = [
    {
        key: 'display_name',
        title: 'Name',
        composed: ['facts.os_release', 'display_name']
    },
    {
        key: 'cve_count',
        title: 'Applicable CVEs'
    }
];
const selectHosts = ({ data, meta }) => {
    const items = data && data.map(item => {
        const { cve_count: cveCount, ...rest } = item.attributes;
        return {
            cve_count: (meta.opt_out && 'Excluded') || cveCount,
            id: item.attributes.inventory_id,
            ...rest
        };
    });
    return items;
};

const SystemsHook = () => {
    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);
    const [selectedHosts, setSelectedHosts] = useState([]);
    const dispatch = useDispatch();

    const systems = useSelector(({ SystemsStore }) => SystemsStore.payload);

    const params = useSelector(
        ({ SystemsStore }) => SystemsStore.params
    );

    const metadata = useSelector(
        ({ SystemsStore }) => SystemsStore.metadata
    );

    const items = useMemo(() => selectHosts(systems), [systems]);

    useEffect(() => {
        dispatch(fetchSystems(params));
    }, [params]);

    const loadInventory = async () => {
        const {
            inventoryConnector,
            mergeWithEntities,
            mergeWithDetail
        } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons,
            pfReactTable
        });

        ReducerRegistry.register({
            ...mergeWithEntities(
                inventoryEntitiesReducer(
                    systemsListColumns
                )
            ),
            ...mergeWithDetail()
        });
        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());

        setInventoryTable(() => InventoryTable);
    };

    useEffect(() => {
        loadInventory();
    }, []);

    useEffect(()=>{
        if (systems.data) {dispatch(selectMultipleEntities(selectedHosts));}
    }, [selectedHosts]);

    const onRefresh = (params) => {
        dispatch(changeSystemsParams(params));
    };

    const handleSelect = (isChecked, payload) => {
        if (!payload) { payload = []; }

        setSelectedHosts(payload);
    };

    return (
        <Fragment>
            <VulnerabilityHeader showBreadcrumb={false} />
            <Main>
                { InventoryTable &&  (
                    <InventoryTable
                        items={items}
                        page={metadata && metadata.page || 1 }
                        perPage={metadata && metadata.page_size || 0}
                        total={metadata && metadata.total_items || 0}
                        onRefresh={onRefresh}
                        hasCheckbox={systems.length !== 0}
                    >
                        <SystemsTableToolbar
                            selectedHosts = {selectedHosts}
                            systems = {systems}
                            onRefresh = {onRefresh}
                            setSelectedHosts = {setSelectedHosts}
                            handleSelect = {handleSelect}
                            params = {params}
                        />
                    </InventoryTable>
                )}
            </Main>
        </Fragment>
    );
};

export default SystemsHook;
