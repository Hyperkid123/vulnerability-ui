import * as reactCore from '@patternfly/react-core';
import { Page } from '@patternfly/react-core';
import * as reactIcons from '@patternfly/react-icons';
import { Main } from '@redhat-cloud-services/frontend-components';
import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';
import propTypes from 'prop-types';
import React from 'react';
import { connect } from 'react-redux';
import * as reactRouterDom from 'react-router-dom';
import { withRouter } from 'react-router-dom';
import { dispatchAction } from '../../../Helpers/Dispatcher';
import { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';
import { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';
import ReducerRegistry from '../../../Utilities/ReducerRegistry';
import VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';

class InventoryDetail extends React.Component {
    static propTypes = {
        fetchSystemDetails: propTypes.func,
        systemDetails: propTypes.object,
        optOutSystem: propTypes.func,
        match: propTypes.object,
        addNotification: propTypes.func
    };

    constructor(props) {
        super(props);

        this.state = {
            inventoryId: this.props.match.params.inventoryId,
            removeListener: () => {},
            linkHovered: false
        };
    }

    componentDidMount() {
        this.props.fetchSystemDetails(this.state.inventoryId);
        this.fetchInventory();
    }

    async fetchInventory() {
        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({
            react: React,
            reactRouterDom,
            reactCore,
            reactIcons
        });

        ReducerRegistry.register({
            ...mergeWithEntities(),
            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES))
        });

        this.setState({
            InventoryHeader: inventoryConnector().InventoryDetailHead,
            InventoryBody: inventoryConnector().AppInfo
        });
        this.state.removeListener();
    }

    checkItem = (key, value) => {
        let newList = this.state.systemList;
        newList[key].selected = value;
        this.setState({ systemList: newList });
    };

    toggleLinkHover = value => {
        this.setState({ ...this.state, linkHovered: value });
    };

    optOutSystem = value => {
        this.props.optOutSystem(this.state.inventoryId, value).then(() => {
            this.props.fetchSystemDetails(this.state.inventoryId);
            value === true
                ? this.props.addNotification({
                    variant: 'info',
                    title: 'System hidden from vulnerability reporting',
                    description: 'This system does not show up in vulnerability reporting metrics or reports'
                })
                : this.props.addNotification({
                    variant: 'info',
                    title: 'System visible in vulnerability reporting',
                    description: 'This system shows up in vulnerability reporting metrics and reports'
                });
        });
    };

    hiddenSystemLink = () => {
        const visible = (
            <React.Fragment>
                <reactIcons.EyeIcon /> Show in reporting
            </React.Fragment>
        );
        const hidden = (
            <React.Fragment>
                <reactIcons.EyeSlashIcon /> Hidden from reporting
            </React.Fragment>
        );
        const linkState =
            this.props.systemDetails && this.props.systemDetails.opt_out && (this.state.linkHovered ? visible : hidden);
        return (
            <a
                onMouseEnter={() => this.toggleLinkHover(true)}
                onMouseLeave={() => this.toggleLinkHover(false)}
                onClick={() => this.optOutSystem(false)}
            >
                {linkState}
            </a>
        );
    };

    render() {
        const { InventoryHeader, InventoryBody } = this.state;
        const { systemDetails = {} } = this.props;
        const { opt_out: isOptOut = false, entity } = systemDetails;

        return (
            <Page>
                <VulnerabilityHeader title="" showTabs={false}>
                    {InventoryHeader && (
                        <InventoryHeader
                            hideBack
                            actions={
                                entity && [
                                    isOptOut
                                        ? {
                                            title: 'Show in vulnerability reporting',
                                            onClick: () => this.optOutSystem(false)
                                        }
                                        : {
                                            title: 'Hide from vulnerability reporting',
                                            onClick: () => this.optOutSystem(true)
                                        }
                                ]
                            }
                        />
                    )}
                    {this.hiddenSystemLink()}
                </VulnerabilityHeader>

                {InventoryBody && (
                    <Main>
                        <React.Fragment>
                            <InventoryBody />
                        </React.Fragment>
                    </Main>
                )}
            </Page>
        );
    }
}

function mapStateToProps(state) {
    return {
        systemDetails: state.entityDetails
    };
}

const mapDispatchToProps = () => {
    return {
        optOutSystem: (system, status) => dispatchAction(optOutSystemAction(system, status)),
        fetchSystemDetails: system => dispatchAction(fetchSystemDetails(system)),
        addNotification: notification => dispatchAction(addNotification(notification))
    };
};

export default withRouter(
    connect(
        mapStateToProps,
        mapDispatchToProps
    )(InventoryDetail)
);
