import { LongTextTooltip, Shield } from '@redhat-cloud-services/frontend-components';
import { parseCvssScore, processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';
import React from 'react';
import { Link } from 'react-router-dom';
import StatusDropdown from '../Components/SmartComponents/StatusDropdown/StatusDropdown';

export function createCveListByAccount(cveList) {
    let isLoading = cveList.isLoading;
    if (!isLoading) {
        let payload = cveList.payload;

        let { data, meta, errors } = payload;

        data =
            data &&
            data.map(row => ({
                id: row.id,
                cells: [
                    <span key={row.id}>
                        <Link to={'/cves/' + row.attributes.synopsis}>{row.attributes.synopsis}</Link>
                    </span>,
                    <span key={row.id}>
                        <LongTextTooltip content={row.attributes.description} maxLength={180} entryDelay={1200} />
                    </span>,
                    <span key={row.id}>{processDate(row.attributes.public_date)}</span>,
                    <span key={row.id}>{parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}</span>,

                    <span key={row.id}>
                        <Shield impact={row.attributes.impact} hasLabel />
                    </span>,

                    <span key={row.id}>{row.attributes.systems_affected.toString()}</span>
                ]
            }));
        return { data, meta, isLoading, errors };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

export function createCveListBySystem(systemId, cveList) {
    let isLoading = cveList && cveList.isLoading;
    if (!isLoading) {
        const {
            payload: { data, meta, errors }
        } = cveList;
        return {
            data: data && [
                ...data.map(row => ({
                    id: row.id,
                    cells: [
                        <span key={row.id}>{handleCVELink(row.attributes.synopsis)}</span>,
                        <span key={row.id}>
                            <LongTextTooltip
                                content={row.attributes.description}
                                tooltipMaxWidth={'50vw'}
                                entryDelay={1200}
                                maxLength={180}
                            />
                        </span>,

                        <span key={row.id}>{processDate(row.attributes.public_date)}</span>,
                        <span key={row.id}>{parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}</span>,
                        <span key={row.id}>
                            <Shield impact={row.attributes.impact} tooltipPosition={'right'} hasLabel />
                        </span>,

                        <span key={row.attributes.synopsis}>
                            <StatusDropdown
                                currentStatusName={row.attributes.status}
                                systemId={systemId}
                                currentStatusId={row.attributes.status_id}
                                cveName={row.attributes.synopsis}
                                hasNotification
                            />
                        </span>
                    ]
                }))
            ],
            meta,
            errors,
            isLoading
        };
    }

    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };
}

function handleCVELink(synopsis) {
    if (location.href.indexOf('vulnerability') !== -1) {
        return <Link to={'/cves/' + synopsis}>{synopsis}</Link>;
    } else {
        return <a href={`${document.baseURI}rhel/vulnerability/cves/${synopsis}`}>{synopsis}</a>;
    }
}
