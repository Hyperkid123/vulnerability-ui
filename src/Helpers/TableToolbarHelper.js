import messages from '../Messages';
import { FILTERS } from './constants';
import { intl } from '../Utilities/IntlProvider';

export const handleChangePage = (_event, page, apply) => apply({ page });

export const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });

export const exportConfig = (methods) => (
    { label: intl.formatMessage(messages.kebabExportAsJson) },
    { label: intl.formatMessage(messages.kebabExportAsCsv) },
    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }
);

export const buildActiveFilters = (currentFilters, filterRulevalues = []) => {

    const { filter } = currentFilters;

    const buildChip = (key, parameter) => (
        FILTERS[key].items.reduce((object, item) => {
            if (parameter === item.value) {
                object.name = item.label;
                object.value = item.value ;
            }
            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))
            {
                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);
                object.name = filteredRule && filteredRule.label || parameter ;
                object.value = parameter;
            }

            return object;
        }, {})
    );

    const buildChips = (paramValues, key) => {
        return paramValues.reduce((values, parameter) => {
            values.push(buildChip(key, parameter));
            return values;
        }, []);
    };

    const filterChips = Object.keys(FILTERS).reduce((array, key) => {
        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {

            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');
            const filteredValues = (multiValue && multiValue.length > 1)
                                            && buildChips(multiValue, key)
                                            || [buildChip(key, currentFilters[key])];

            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });
        }

        return array;
    }, []);

    filter && filterChips.push(
        { key: 'filter',
            category: intl.formatMessage(messages.searchLabel),
            chips: [{ name: filter }]
        }
    );

    return filterChips;
};

export const removeFilters = (chips, apply) =>{
    const emptyFilter = chips.reduce((obj, item) =>{
        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {
            obj[item.key] = '';
        }
        else {
            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');
        }

        return obj;
    }, {});

    apply(emptyFilter);
};
