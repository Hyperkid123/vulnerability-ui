let BASE_ROUTE = '/api/vulnerability/';
let apiVersion = 'v1';
import { verifyParameters } from './MiscHelper';

export function createApiCall(endpoint, method, parameters = undefined, data = undefined) {
    if (parameters && method === 'get') {
        let params = Object.keys(parameters)
        .map(key => [
            encodeURIComponent(key)
            .concat('=')
            .concat(encodeURIComponent(parameters[key]))
        ])
        .join('&');
        endpoint = endpoint.concat('?').concat(params);
    }

    let result = window.insights.chrome.auth
    .getUser()
    .then(() =>
        fetch(BASE_ROUTE + apiVersion + endpoint, {
            method,
            body: JSON.stringify(data)
        })
    )
    .then(res => {
        if (!res.ok) {
            const contentType = res.headers.get('content-type');
            if (contentType.indexOf('json') !== -1) {
                throw res.json();
            } else {
                throw new Promise(resolve => resolve({ errors: [{ status: res.status, detail: res.statusText }] }));
            }
        }

        return res.json();
    })
    .catch(error => {
        error = Promise.resolve(error || {});
        const genericError = { detail: 'There was an error getting data. Reload the page and try again' };
        return error.then(error => {
            const res = (error.errors && error.errors[0]) || genericError;
            throw { ...res };
        });
    });
    return result;
}

export function getCveDetails(synopsis) {
    let endpoint = '/cves/' + synopsis + '/details/';
    let result = createApiCall(endpoint, 'get');
    return result;
}

export function getAffectedSystemsByCVE(synopsis, apiProps) {
    let allowedParams = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'status_id', 'data_format'];
    let queryParams = verifyParameters(apiProps, allowedParams);
    let endpoint = '/cves/' + synopsis + '/affected_systems/';
    let result = createApiCall(endpoint, 'get', queryParams);
    return result;
}

export function getSystems(apiProps) {
    let allowedParams = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'opt_out'];
    let queryParams = verifyParameters(apiProps, allowedParams);
    let endpoint = '/systems/';
    let result = createApiCall(endpoint, 'get', queryParams);
    return result;
}

export function getCveListByAccount(apiProps) {
    let allowedParams = [
        'page',
        'page_size',
        'cvss_from',
        'cvss_to',
        'public_from',
        'public_to',
        'severity',
        'filter',
        'status_id',
        'data_format',
        'sort',
        'show_all'
    ];
    let queryParams = verifyParameters(apiProps, allowedParams);
    let endpoint = '/vulnerabilities/cves/';
    let result = createApiCall(endpoint, 'get', queryParams);
    return result;
}

export function getCveListBySystem(apiProps) {
    let endpoint = '/systems/' + apiProps.system + '/cves/';
    delete apiProps.system;
    let result = createApiCall(endpoint, 'get', apiProps);
    return result;
}

export function fetchStatusList() {
    let endpoint = '/status';
    let result = createApiCall(endpoint, 'get');
    return result;
}
